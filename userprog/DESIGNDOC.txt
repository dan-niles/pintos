		     +--------------------------+
       	     |		   CS 318			|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

Group 97


>> Fill in the names and email addresses of your group members.

Dan Niles - 200421U <asher.20@cse.mrt.ac.lk>
Kulindu Rovin - 200543U <kulindu.20@cse.mrt.ac.lk>


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

---- REFERENCES ----

Intro to OS - Project-2 Discussion : https://www.youtube.com/watch?v=OE79vNZp1KI&ab_channel=FarshadGhanei
Pintos Project-2 System Call : https://www.youtube.com/watch?v=sBFJwVeAwEk&list=PLmQBKYly8OsUPN4zqn3nedxSB0DMoVnX5&index=1&ab_channel=EE415%3AIntro.toOperatingSystem

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

No special data structures like the ones mentioned in the question were used for argument passing.


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Argument parsing was implemented in the setup_stack function. It was done n the following order.

    Creating two variables named "cont" and "argv" with a default size of 2.

    Use strtok_r to parse the command line, keeping track of each argument in "cont" as it goes. 
	If more space is needed, double the size of both "cont" and "argv".

    After parsing the entire command line, the contents of "cont" will be copied to "argv" in reverse order,
	Each character string will also be pushed onto the stack during the copying process.

    After copying, "argv" will have all the arguments in reverse order, and the stack pointer will be word-aligned (multiple of 4 bytes).

    Push the array of pointers from "argv" onto the stack.

    Push "argv", "argc", and a fake return address onto the stack.

    Free "argv" and "cont".

Contents of cont are copied in reverse order to argv to make sure that they can be pushed onto the stack in the correct order.
The stack pointer was decremented from the size of the item pushed, after anything was pushed to the stack to avoid overflowing.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

Pintos implements strtok_r() as opposed to strtok() due to thread safety issues.
strtok() is not much thread safe. The outcomes of string parsing when many threads use the same instance of strtok() may be unpredictable or inaccurate.
On the other hand, multithreaded systems can safely utilize strtok_r(), which is the reentrant variant of strtok().

An extra argument, a pointer to a variable that records the status of the parsing in between calls, is accepted by the strtok_r() function. 
This makes it possible to utilize many strtok_r() instances simultaneously, each with its own state, without interfering with the others. 


>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1.Freedom: The Unix approach offers more flexibility than Pintos since users are not forced to adopt a predetermined structure for commands and parameters.
In the Unix approach, users are free to give commands and parameters in any format.
As a result, the user has more control over how to use and execute their commands.

2.Automation: The Unix method enables the user to create shell scripts.
Through the usage of them, a user can automate complicated or repetitive activities by running a series of shell commands.
Pintos does not have this kind of task automation capability.


			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

The three problems of this assignment can't be named too easy. But they are not too hard either.
THey were all moderately challenging. It took some amount of time to understand the tasks, decide the methods of implementing the solutions
for the tasks and to debug the errors.


>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Everypart of the assignment typically helped in obtaining a greater insigght of aspects of OS design. 
The argument parsing part showed how arguments are passed to programs and how processes work synchronously and change states.
The system calls part showed how various system calls are being executed by the OS.


>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

The additional document named Pintos Guide was very much useful as it explains how to approach the assignment step by step.
It will be a great help if it can be provided at the begining of the lab 2. 
Also all additional resources provided including the youtube vidieos were very much helpful.


>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

No. The way the TAs helped in the assignment throughout the semester was adequate.


>> Any other comments?

No special comments.